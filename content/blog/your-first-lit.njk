---
title: Building a Simple Lit Component
description: Lets walk through building a simple Lit component, perhaps even the one I asked ChatGPT to write in the previous post, and cover all the basics of why I like Lit.
date: git Created
tags:
  - lit
  - web-components
  - web-dev
draft: true
playground: true
preview: true
---
{% renderTemplate 'md' %}
So, you think you want to get into Lit, but diving into a whole new framework feels like effort, and you wish someone would give you some simple to follow instructions
to make life easier. Well, there's the [Lit Getting Started](https://lit.dev/docs/getting-started/) page, but since you're here, lets assume you'd prefer me to walk you
through it, or you're after a less "clinical" approach to setting up a project.

## Project Setup
First things first, we're going to want a project to work in. So,
```bash
$ mkdir lit-component-project

$ cd lit-component-project

$ npm init

$ npm i vite lit typescript
```
We make a folder (you can replace `lit-component-project` with whatever floats your boat right now), `cd` into it, `init` an npm project in that folder, and install a few key dependencies.

- `vite` - this is our build tool, almost zero config, simple, fast, modern, I wouldn't use anything else nowadays to be honest  ([vite docs](https://vitejs.dev/))
- `lit` - this is where all the `lit` code lives, we need this to write anything in `lit`
- `typescript` - let's be honest here, Types are Goodâ„¢. I don't write Javascript anymore, only Typescript, and so we'll be using Typescript here

Then you'll want to make a few files:
{% endrenderTemplate %}

{% playground "starter" %}
  <script type="sample/ts" filename="index.ts">
import { LitElement, html } from 'lit'
import { customElement } from 'lit/decorators.js'

@customElement('my-lit-component')
export class MyLitComponent extends LitElement {
  render () {
    return html`<span>Hello, World!</span>`
  }
}
  </script>
  <script type="sample/json" filename="tsconfig.json">
    {
      "compilerOptions": {
        "experimentalDecorators": true
      }
    }
  </script>
{% endplayground %}

{% renderTemplate 'md' %}
And there you have the absolute barest minimum setup to start up a `typescript + lit` project. All that's left is to start it up and bask in all that amazing web-component functionality.

```bash
$ npx vite dev
```

If you open a browser to the url `vite` helpfully printed to the console, you should be able to see `Hello World` as clear as javascript.
If you desire, you can alias that command as an npm script in your package.json as `"start": "vite dev"` so that all you have to run is

```bash
$ npm start
```

## A Brief Explanation
At this point, you might be asking a few questions, such as:

**Q**: (If you're coming from the world of `webpack`): Where's my enormous config file?

**A**: `vite` has sensible defaults. By default, it looks for an `index.html` in the current directory, and goes from there.
Installing `typescript` as a dependency is enough to support typescript files. If you wanted to use `sass/scss` or some other css
preprocessor, all you would need to do is install the processor, import a file w/ that extension, and off you go. [You can also
provide it with a config file](https://vitejs.dev/config/) (it even accepts a config written in typescript, provided you have it installed)
in order to provide it with specific plugins, or overrides to its defaults, or other things.

**Q**: Holy crud this is amazing?

**A**: Not technically a question, but yes, you are correct.

Now, being able to print "Hello World" with a single tag is great and all, but what if this component had some actual functionality?
As for the functionality in question, I'm going to go with what I asked ChatGPT to write for me [in the previous post](/blog/hello-world/).

To recap, what we're after is the following:
1. a clickable component
2. that counts how many times it's been clicked
3. and displays that somehow

## Even More Code
Here's a simple way to achieve exactly that (ignore that the html references a `.js` file, this is only to work w/ the `playground-*` components for
live code, in a standard `vite` project you would reference the actual filename of your entrypoint file):
{% endrenderTemplate %}

{% playground undefined, undefined, 'my-counter-component', true, 'index.css' %}
  <script type="sample/ts" filename="index.ts">
import { css, LitElement, html } from 'lit'
import { customElement, state } from 'lit/decorators.js'

@customElement('my-counter-component')
export class MyCounterComponent extends LitElement {
  static styles = css`
    :host {
      margin: 1rem;
      display: block;
    }

    .click-counter-button {
      border: 1px solid red;
      border-radius: 5px;
      transition: all 0.5s ease;
    }
  `

  @state() count = 0

  render () {
    return html`
      <button class='click-counter-button' part='button' @click=${() => { this.count += 1 }}>
        This button has been clicked ${this.count} times
      </button>
    `
  }
}
  </script>
  <script type="sample/css" filename="index.css">
  my-counter-component::part(button):hover {
    background-color: lightblue;
  }
  </script>
{% endplayground %}

{% renderTemplate 'md' %}
## The Whole Explanation
{% endrenderTemplate %}
